Releases
========

The Release Management add-on records a release each time any collaborator makes a code deploy or config var change to the app.  Release history provides a full audit trail including when and who created the release.  You can also perform rollbacks to prior releases, which is a great way to back out of bad deploys and restore the app to a known working state.

Setup
-----

Install the releases:basic or releases:advanced add-on for each app you wish to track releases on:

    $ heroku addons:add releases:basic
    Adding releases:basic to myapp...done.

You'll need version 1.14.0 or higher of the Heroku client gem to use the releases and rollback commands.

Listing releases
----------------

To see the list of releases for an app:

    :::term
    $ heroku releases
    Rel   Change                          By                    When
    ----  ----------------------          ----------            ----------
    v52   Config add AWS_S3_KEY           jim@example.com       5 minutes ago            
    v51   Deploy de63889                  stephan@example.com   7 minutes ago
    v50   Deploy 7c35f77                  stephan@example.com   3 hours ago
    v49   Rollback to v46                 joe@example.com       2010-09-12 15:32:17 -0700
    v48   Maintenance off                 joe@example.com       2010-09-12 15:27:02 -0700

To get detailed info on a release:

    :::term
    $ heroku releases:info v24
    === Release v24
    Change:      Deploy 575bfa8
    By:          jim@example.com
    When:        6 hours ago
    Addons:      deployhooks:email, releases:advanced
    Config:      MY_CONFIG_VAR => 42
                 RACK_ENV      => production

Rollback
--------

Use the rollback command to roll back to the last release:

    :::term
    $ heroku rollback
    Rolled back to v51

If you are using advanced release mangement, you may choose to specify another release to target:

    :::term
    $ heroku rollback v40
    Rolled back to v40

Rolling back will create a new release which is a copy of the state of code and config vars contained in the targeted release.  The state of the database or external state held in add-ons (for example, the contents of memcache) will **not** be affected and are up to you to reconcile with the rollback.

NOTE: You cannot roll back to a release which would change the state of add-ons, since this affects billing.

Simple vs advanced
------------------

The simple release management add-on stores two releases: current and previous.  This will allow you to roll back only one release - like a single level undo.

The advanced release management add-on stores all releases, allowing you to see the full historical audit trail and roll back to any prior release at any time.

